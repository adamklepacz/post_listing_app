{"version":3,"sources":["common/fetchMethods.js","common/config.js","common/components/ErrorMessage.jsx","common/enums.js","modules/login/LoginForm.jsx","common/components/Prelodaer.jsx","modules/dashboard/components/GridItem.jsx","modules/dashboard/components/ListItem.jsx","common/components/Dropdown.jsx","modules/dashboard/components/DisplayModeDropdown.jsx","modules/dashboard/components/SortDropdown.jsx","modules/dashboard/components/DashboardHeader.jsx","common/helpers.js","common/components/AuthorInfoModal.jsx","common/components/Overlay.jsx","modules/dashboard/Dashboard.jsx","common/components/CommentModal.jsx","modules/singlePost/SinglePost.jsx","common/components/AppBar.jsx","app/App.jsx","serviceWorker.js","common/browserHistory.js","index.js"],"names":["handleFetchErrors","error","console","message","Error","postJsonData","url","data","a","fetch","body","JSON","stringify","headers","Accept","method","result","json","putData","userToken","getData","API_DATA","Object","freeze","AUTH","GET_AUTHOR","GET_POSTS","PUT_TIME","URL","ErrorMessage","children","className","Typography","align","color","gutterBottom","RESPONSE_TYPE","FORBIDDEN","OK","DISPLAY_MODE","GRID","LIST","SORT_OPTION","ASCENDING","DESCENDING","NEWEST_FIRST","OLDEST_FIRST","USER_DATA","TOKEN","QUERY_PARAMS","ORDER","ORDER_BY","PAGE","QUERY_VALUES","DATE","TITLE","LoginForm","props","handleUserNameChange","event","value","target","setState","username","handlePasswordChange","password","handleSubmit","preventDefault","state","onLogin","token","code","this","Paper","onSubmit","TextField","id","label","onChange","required","variant","type","Button","PureComponent","Preloader","GridItem","title","thumbnail","to","alt","loader","src","ListItem","showExcerpt","isExcerptVisible","hideExcerpt","handleOnInfoClick","onInfoClick","authorId","date","excerpt","onClick","Dropdown","defaultValue","options","FormControl","InputLabel","Select","labelId","map","option","MenuItem","key","DisplayModeDropdown","displayMode","handleDisplayModeChange","SortDropdown","nameSortOptions","dateSortOptions","DashboardHeader","dateDropdownDefaultValue","nameDropdownDefaultValue","onDateDropdownChange","onDisplayModeChange","onNameDropdownChange","saveToLocalStorage","localStorage","setItem","readLocalStorage","parse","getItem","removeLocalStorageItem","removeItem","updateUrlParams","urlString","params","queryString","search","searchParams","URLSearchParams","forEach","el","set","param","toString","AuthorModal","getUserToken","fetchAuthorDetails","authorData","onClose","name","description","avatar","Overlay","role","Dashboard","fetchPosts","apiUrl","pagination","posts","handleSortingByName","paramsToUpdate","updatedUrl","buildApiUrl","handleSortingByDate","sortOption","sortValue","handlePageClick","selectedPage","page","selected","showAuthorModal","isAuthorModalVisible","hideAuthorModal","totalPages","Container","maxWidth","classNames","post","activeClassName","breakClassName","breakLabel","containerClassName","marginPagesDisplayed","nextLabel","onPageChange","pageCount","pageRangeDisplayed","previousLabel","subContainerClassName","CommentModal","handleCheckboxUpdate","isCheckboxChecked","handleNameChange","authorName","handleCommentChange","comment","prevProps","prevIsChecked","onCheck","TextareaAutosize","placeholder","rows","FormControlLabel","control","Checkbox","checked","SinglePost","fetchUserData","fetchPostData","pathname","history","location","postData","handleEnterTime","enterTime","Date","now","handleLeaveTime","leaveTime","time","handleCommentSubmit","comments","userName","hideCommentModal","showCommentModal","isCommentModalVisible","checkCheckbox","uncheckCheckbox","content","withRouter","AppTopBar","onLogout","AppBar","App","fetchUserToken","handleLogin","handleLogout","window","reload","from","exact","path","component","render","Boolean","hostname","match","createBrowserHistory","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.900f218d.chunk.js","sourcesContent":["const handleFetchErrors = error => {\n  /**\n   * This is not a good practice to handle errors,\n   * console error is only used temporary\n   */\n\n  // eslint-disable-next-line no-console\n  console.error(error.message);\n\n  throw new Error(error.message);\n};\n\nexport const postJsonData = async (url, data) => {\n  try {\n    const result = await fetch(url, {\n      body: JSON.stringify(data),\n      headers: {\n        Accept: 'application/json',\n        'Content-Type': 'application/json'\n      },\n      method: 'POST'\n    });\n\n    return result.json();\n  } catch (error) {\n    return handleFetchErrors(error);\n  }\n};\n\nexport const putData = (url, data) => async userToken => {\n  try {\n    const result = await fetch(url, {\n      body: JSON.stringify(data),\n      headers: {\n        'Content-Type': 'application/json',\n        'X-Token': userToken\n      },\n      method: 'PUT'\n    });\n\n    return result.json();\n  } catch (error) {\n    return handleFetchErrors(error);\n  }\n};\n\nexport const getData = url => async userToken => {\n  try {\n    const result = await fetch(url, {\n      headers: {\n        'Content-Type': 'application/json',\n        'X-token': userToken\n      },\n      method: 'GET'\n    });\n\n    return result.json();\n  } catch (error) {\n    return handleFetchErrors(error);\n  }\n};\n","export const API_DATA = Object.freeze({\n  AUTH: 'auth',\n  GET_AUTHOR: 'author',\n  GET_POSTS: 'posts',\n  PUT_TIME: 'time',\n  URL: 'https://edu-api.chop-chop.org'\n});\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Typography } from '@material-ui/core';\n\nconst ErrorMessage = ({ children }) => (\n  <div className=\"error-message\">\n    <Typography align=\"left\" color=\"error\" gutterBottom>\n      {children}\n    </Typography>\n  </div>\n);\n\nErrorMessage.propTypes = {\n  children: PropTypes.oneOfType([PropTypes.string, PropTypes.node]).isRequired\n};\n\nexport default ErrorMessage;\n","export const RESPONSE_TYPE = Object.freeze({\n  FORBIDDEN: 403,\n  OK: 200\n});\n\nexport const DISPLAY_MODE = Object.freeze({\n  GRID: 'displayMode/grid',\n  LIST: 'displayMode/list'\n});\n\nexport const SORT_OPTION = Object.freeze({\n  ASCENDING: 'sort/ascending',\n  DESCENDING: 'sort/descending',\n  NEWEST_FIRST: 'sort/newestFirst',\n  OLDEST_FIRST: 'sort/oldestFirst'\n});\n\nexport const USER_DATA = Object.freeze({\n  TOKEN: 'userToken'\n});\n\nexport const QUERY_PARAMS = Object.freeze({\n  ORDER: 'order',\n  ORDER_BY: 'orderBy',\n  PAGE: 'page'\n});\n\nexport const QUERY_VALUES = Object.freeze({\n  ASCENDING: 'asc',\n  DATE: 'date',\n  DESCENDING: 'desc',\n  TITLE: 'title'\n});\n","import React, { PureComponent } from 'react';\nimport { Button, TextField, Paper } from '@material-ui/core';\nimport PropTypes from 'prop-types';\n\nimport { postJsonData } from '../../common/fetchMethods';\nimport { API_DATA } from '../../common/config';\nimport ErrorMessage from '../../common/components/ErrorMessage';\nimport { RESPONSE_TYPE } from '../../common/enums';\n\nclass LoginForm extends PureComponent {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      error: null,\n      password: '',\n      username: ''\n    };\n  }\n\n  handleUserNameChange = event => {\n    const { value } = event.target;\n\n    this.setState({ username: value });\n  };\n\n  handlePasswordChange = event => {\n    const { value } = event.target;\n\n    this.setState({ password: value });\n  };\n\n  handleSubmit = async event => {\n    event.preventDefault();\n\n    const { username, password } = this.state;\n    const data = { username, password };\n    const { onLogin } = this.props;\n\n    try {\n      const result = await postJsonData(\n        `${API_DATA.URL}/${API_DATA.AUTH}`,\n        data\n      );\n      const {\n        data: { token, message },\n        code\n      } = result;\n\n      if (code === RESPONSE_TYPE.FORBIDDEN) {\n        throw new Error(message);\n      }\n\n      onLogin(token);\n    } catch (error) {\n      this.setState({ error: error.message });\n    }\n  };\n\n  render() {\n    const { error } = this.state;\n\n    return (\n      <Paper className=\"login-form-wrapper\">\n        <form className=\"login-form\" onSubmit={this.handleSubmit}>\n          <TextField\n            className=\"login-form__input\"\n            id=\"filled-basic\"\n            label=\"Username\"\n            onChange={this.handleUserNameChange}\n            required\n            variant=\"filled\"\n          />\n          <TextField\n            className=\"login-form__input\"\n            id=\"filled-basic\"\n            label=\"password\"\n            onChange={this.handlePasswordChange}\n            required\n            type=\"password\"\n            variant=\"filled\"\n          />\n          <Button color=\"primary\" type=\"submit\" variant=\"contained\">\n            Login\n          </Button>\n        </form>\n        {error && <ErrorMessage>{error}</ErrorMessage>}\n      </Paper>\n    );\n  }\n}\n\nLoginForm.propTypes = {\n  onLogin: PropTypes.func.isRequired\n};\n\nexport default LoginForm;\n","import React from 'react';\n\nconst Preloader = () => (\n  <div className=\"sk-chase\">\n    <div className=\"sk-chase-dot\" />\n    <div className=\"sk-chase-dot\" />\n    <div className=\"sk-chase-dot\" />\n    <div className=\"sk-chase-dot\" />\n    <div className=\"sk-chase-dot\" />\n    <div className=\"sk-chase-dot\" />\n  </div>\n);\n\nexport default Preloader;\n","import React from 'react';\nimport { Paper, Typography } from '@material-ui/core';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport ReactImage from 'react-image';\n\nimport Preloader from '../../../common/components/Prelodaer';\n\nconst GridItem = ({ data }) => {\n  const { title, thumbnail, id } = data;\n\n  return (\n    <Paper className=\"grid-item\">\n      <Link to={`/posts/${id}`}>\n        <Typography\n          align=\"left\"\n          className=\"grid-item__heading\"\n          gutterBottom\n          variant=\"h6\"\n        >\n          {title}\n        </Typography>\n        <div className=\"grid-item__image-wrapper\">\n          <ReactImage\n            alt=\"post thumbnail\"\n            className=\"grid-item__image\"\n            loader={<Preloader />}\n            src={[thumbnail, 'https://via.placeholder.com/150x100']}\n          />\n        </div>\n      </Link>\n    </Paper>\n  );\n};\n\nGridItem.propTypes = {\n  data: PropTypes.objectOf(PropTypes.any).isRequired\n};\n\nexport default GridItem;\n","import React, { PureComponent } from 'react';\nimport { Paper, Typography, Button } from '@material-ui/core';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport ReactImage from 'react-image';\n\nimport Preloader from '../../../common/components/Prelodaer';\n\nclass ListItem extends PureComponent {\n  constructor() {\n    super();\n\n    this.state = {\n      isExcerptVisible: false\n    };\n  }\n\n  showExcerpt = () => this.setState({ isExcerptVisible: true });\n\n  hideExcerpt = () => this.setState({ isExcerptVisible: false });\n\n  handleOnInfoClick = () => {\n    const {\n      onInfoClick,\n      data: { authorId }\n    } = this.props;\n\n    onInfoClick(authorId);\n  };\n\n  render() {\n    const { isExcerptVisible } = this.state;\n    const { data } = this.props;\n    const { date, excerpt, id, title, thumbnail } = data;\n\n    return (\n      <Paper className=\"list-item\">\n        <div className=\"list-item__container\">\n          <div className=\"list-item__img-wrapper\">\n            <ReactImage\n              alt=\"post thumbnail\"\n              loader={<Preloader />}\n              src={[thumbnail, 'https://via.placeholder.com/75x50']}\n            />\n          </div>\n          <div className=\"list-item__content\">\n            <span className=\"list-item__date\">\n              <Typography>{date}</Typography>\n            </span>\n            <Typography\n              align=\"left\"\n              className=\"list-item__heading\"\n              variant=\"h5\"\n            >\n              <Link to={`/posts/${id}`}>{title}</Link>\n            </Typography>\n          </div>\n          <div className=\"list-item__controllers\">\n            <Button\n              className=\"list-item__button\"\n              color=\"primary\"\n              onClick={isExcerptVisible ? this.hideExcerpt : this.showExcerpt}\n              variant=\"contained\"\n            >\n              e\n            </Button>\n            <Button\n              className=\"list-item__button\"\n              color=\"default\"\n              onClick={this.handleOnInfoClick}\n              variant=\"contained\"\n            >\n              i\n            </Button>\n          </div>\n        </div>\n        {isExcerptVisible && (\n          <div className=\"list-item__excerpt\">\n            <Typography align=\"left\" gutterBottom>\n              {excerpt}\n            </Typography>\n          </div>\n        )}\n      </Paper>\n    );\n  }\n}\n\nListItem.propTypes = {\n  data: PropTypes.objectOf(PropTypes.any).isRequired,\n\n  onInfoClick: PropTypes.func.isRequired\n};\n\nexport default ListItem;\n","import React from 'react';\nimport { FormControl, InputLabel, MenuItem, Select } from '@material-ui/core';\nimport PropTypes from 'prop-types';\n\nconst Dropdown = ({ defaultValue, onChange, options, label }) => (\n  <FormControl className=\"dropdown\">\n    <InputLabel id=\"dropdown__label\">{label}</InputLabel>\n    <Select labelId=\"dropdown__label\" onChange={onChange} value={defaultValue}>\n      {options.map(option => (\n        <MenuItem key={option.value} value={option.value}>\n          {option.label}\n        </MenuItem>\n      ))}\n    </Select>\n  </FormControl>\n);\n\nDropdown.propTypes = {\n  defaultValue: PropTypes.string.isRequired,\n  label: PropTypes.string.isRequired,\n  options: PropTypes.arrayOf(PropTypes.object).isRequired,\n\n  onChange: PropTypes.func.isRequired\n};\n\nexport default Dropdown;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { DISPLAY_MODE } from '../../../common/enums';\nimport Dropdown from '../../../common/components/Dropdown';\n\nconst options = [\n  { value: DISPLAY_MODE.GRID, label: 'Grid' },\n  { value: DISPLAY_MODE.LIST, label: 'List' }\n];\n\nconst DisplayModeDropdown = ({ displayMode, handleDisplayModeChange }) => (\n  <>\n    <Dropdown\n      defaultValue={displayMode}\n      label=\"Display mode\"\n      onChange={handleDisplayModeChange}\n      options={options}\n    />\n  </>\n);\n\nDisplayModeDropdown.propTypes = {\n  displayMode: PropTypes.string.isRequired,\n\n  handleDisplayModeChange: PropTypes.func.isRequired\n};\n\nexport default DisplayModeDropdown;\n","import React from 'react';\n\nimport Dropdown from '../../../common/components/Dropdown';\n\nconst SortDropdown = props => (\n  <>\n    <Dropdown {...props} />\n  </>\n);\n\nexport default SortDropdown;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport DisplayModeDropdown from './DisplayModeDropdown';\nimport SortDropdown from './SortDropdown';\nimport { SORT_OPTION } from '../../../common/enums';\n\nconst nameSortOptions = [\n  { value: SORT_OPTION.ASCENDING, label: 'Sort A - Z' },\n  { value: SORT_OPTION.DESCENDING, label: 'Sort Z - A' }\n];\n\nconst dateSortOptions = [\n  { value: SORT_OPTION.NEWEST_FIRST, label: 'Latest' },\n  { value: SORT_OPTION.OLDEST_FIRST, label: 'Oldest' }\n];\n\nconst DashboardHeader = ({\n  dateDropdownDefaultValue,\n  displayMode,\n  nameDropdownDefaultValue,\n  onDateDropdownChange,\n  onDisplayModeChange,\n  onNameDropdownChange\n}) => (\n  <header className=\"dashboard-header\">\n    <div className=\"dashboard-header__dropdowns\">\n      <SortDropdown\n        defaultValue={nameDropdownDefaultValue}\n        label=\"Sort by name\"\n        onChange={onNameDropdownChange}\n        options={nameSortOptions}\n      />\n      <SortDropdown\n        defaultValue={dateDropdownDefaultValue}\n        label=\"Sort by date\"\n        onChange={onDateDropdownChange}\n        options={dateSortOptions}\n      />\n    </div>\n\n    <DisplayModeDropdown\n      displayMode={displayMode}\n      handleDisplayModeChange={onDisplayModeChange}\n    />\n  </header>\n);\n\nDashboardHeader.propTypes = {\n  dateDropdownDefaultValue: PropTypes.string.isRequired,\n  displayMode: PropTypes.string.isRequired,\n  nameDropdownDefaultValue: PropTypes.string.isRequired,\n\n  onDateDropdownChange: PropTypes.func.isRequired,\n  onDisplayModeChange: PropTypes.func.isRequired,\n  onNameDropdownChange: PropTypes.func.isRequired\n};\n\nexport default DashboardHeader;\n","export const saveToLocalStorage = (key, value) =>\n  localStorage.setItem(key, JSON.stringify(value));\n\nexport const readLocalStorage = key => JSON.parse(localStorage.getItem(key));\n\nexport const removeLocalStorageItem = key => localStorage.removeItem(key);\n\n/**\n * This methods search for url params like '?order=asc' and creates or updates them\n * @param {urlString: String}\n * @param {params: Array} array of objects eg. [{param: 'order', value: 'asc'}]\n * @returns {updatedUrl: String} url with updated params\n */\nexport const updateUrlParams = urlString => params => {\n  const url = new URL(urlString);\n  const queryString = url.search;\n  const searchParams = new URLSearchParams(queryString);\n\n  // update param value\n  params.forEach(el => {\n    searchParams.set(el.param, el.value);\n  });\n  url.search = searchParams.toString();\n\n  return url.toString();\n};\n","import React, { PureComponent } from 'react';\nimport { Button, Paper, Typography } from '@material-ui/core';\nimport PropTypes from 'prop-types';\nimport ReactImage from 'react-image';\n\nimport { getData } from '../fetchMethods';\nimport { readLocalStorage } from '../helpers';\nimport { USER_DATA } from '../enums';\nimport { API_DATA } from '../config';\nimport Preloader from './Prelodaer';\n\nclass AuthorModal extends PureComponent {\n  constructor() {\n    super();\n\n    this.state = {\n      authorData: null,\n      userToken: null\n    };\n  }\n\n  componentDidMount() {\n    this.getUserToken();\n  }\n\n  getUserToken = () => {\n    const { userToken } = readLocalStorage(USER_DATA.TOKEN);\n\n    this.setState({ userToken }, () => this.fetchAuthorDetails());\n  };\n\n  fetchAuthorDetails = async () => {\n    const { authorId } = this.props;\n    const { userToken } = this.state;\n\n    try {\n      const result = await getData(\n        `${API_DATA.URL}/${API_DATA.GET_AUTHOR}/${authorId}`\n      )(userToken);\n      const { data } = result;\n\n      this.setState({ authorData: data });\n    } catch (error) {\n      /**\n       * This is not a good practice to handle errors\n       * this is only temporary solution\n       */\n    }\n  };\n\n  render() {\n    const { onClose } = this.props;\n    const { authorData } = this.state;\n\n    if (!authorData) {\n      return null;\n    }\n\n    const { name, description, avatar } = authorData;\n\n    return (\n      <Paper className=\"author-modal\">\n        <header className=\"author-modal__header\">\n          <Typography align=\"left\" gutterBottom>\n            {name}\n          </Typography>\n          <div className=\"author-modal__image-wrapper\">\n            <ReactImage\n              className=\"author-modal__image\"\n              loader={<Preloader />}\n              src={[avatar, 'https://via.placeholder.com/20x20']}\n            />\n          </div>\n        </header>\n        <div className=\"author-modal__body\">\n          <Typography align=\"left\">{description}</Typography>\n        </div>\n        <footer className=\"author-modal__footer\">\n          <Button\n            className=\"author-modal__close\"\n            color=\"default\"\n            onClick={onClose}\n            variant=\"contained\"\n          >\n            Close\n          </Button>\n        </footer>\n      </Paper>\n    );\n  }\n}\n\nAuthorModal.propTypes = {\n  authorId: PropTypes.string.isRequired,\n\n  onClose: PropTypes.func.isRequired\n};\n\nexport default AuthorModal;\n","import React from 'react';\n\nconst Overlay = () => <div className=\"overlay overlay--medium\" role=\"banner\" />;\n\nexport default Overlay;\n","import React, { PureComponent } from 'react';\nimport { Container } from '@material-ui/core';\nimport classNames from 'classnames';\nimport ReactPaginate from 'react-paginate';\n\nimport GridItem from './components/GridItem';\nimport ListItem from './components/ListItem';\nimport DashboardHeader from './components/DashboardHeader';\nimport {\n  DISPLAY_MODE,\n  QUERY_PARAMS,\n  QUERY_VALUES,\n  SORT_OPTION,\n  USER_DATA\n} from '../../common/enums';\nimport AuthorModal from '../../common/components/AuthorInfoModal';\nimport Overlay from '../../common/components/Overlay';\nimport { getData } from '../../common/fetchMethods';\nimport { API_DATA } from '../../common/config';\nimport { readLocalStorage, updateUrlParams } from '../../common/helpers';\n\nclass Dashboard extends PureComponent {\n  constructor() {\n    super();\n\n    this.state = {\n      apiUrl: `${API_DATA.URL}/${API_DATA.GET_POSTS}`,\n      authorId: null,\n      dateDropdownDefaultValue: SORT_OPTION.NEWEST_FIRST,\n      displayMode: DISPLAY_MODE.LIST,\n      isAuthorModalVisible: false,\n      nameDropdownDefaultValue: SORT_OPTION.ASCENDING,\n      pagination: null,\n      posts: [],\n      userToken: null\n    };\n  }\n\n  componentDidMount() {\n    this.getUserToken();\n  }\n\n  getUserToken = () => {\n    const { userToken } = readLocalStorage(USER_DATA.TOKEN);\n\n    this.setState({ userToken }, () => this.fetchPosts());\n  };\n\n  fetchPosts = async () => {\n    const { userToken, apiUrl } = this.state;\n\n    try {\n      const result = await getData(apiUrl)(userToken);\n      const { data, pagination } = result;\n\n      this.setState({ posts: data, pagination });\n    } catch (error) {\n      /**\n       * This not a good practice to handle errors\n       * this is only temporary solution\n       */\n      // eslint-disable-next-line no-console\n    }\n  };\n\n  handleDisplayModeChange = event => {\n    const { value } = event.target;\n\n    this.setState({ displayMode: value });\n  };\n\n  handleSortingByName = event => {\n    const { value } = event.target;\n    const { apiUrl } = this.state;\n    const paramsToUpdate = [\n      {\n        param: QUERY_PARAMS.ORDER,\n        value:\n          value === SORT_OPTION.ASCENDING\n            ? QUERY_VALUES.ASCENDING\n            : QUERY_VALUES.DESCENDING\n      },\n      {\n        param: QUERY_PARAMS.ORDER_BY,\n        value: QUERY_VALUES.TITLE\n      }\n    ];\n\n    const updatedUrl = updateUrlParams(apiUrl)(paramsToUpdate);\n\n    this.buildApiUrl(updatedUrl)('nameDropdownDefaultValue', value);\n  };\n\n  handleSortingByDate = event => {\n    const { value } = event.target;\n    const { apiUrl } = this.state;\n\n    const paramsToUpdate = [\n      {\n        param: QUERY_PARAMS.ORDER,\n        value:\n          value === SORT_OPTION.OLDEST_FIRST\n            ? QUERY_VALUES.ASCENDING\n            : QUERY_VALUES.DESCENDING\n      },\n      {\n        param: QUERY_PARAMS.ORDER_BY,\n        value: QUERY_VALUES.DATE\n      }\n    ];\n    const updatedUrl = updateUrlParams(apiUrl)(paramsToUpdate);\n\n    this.buildApiUrl(updatedUrl)('dateDropdownDefaultValue', value);\n  };\n\n  buildApiUrl = url => (sortOption, sortValue) => {\n    this.setState(\n      {\n        apiUrl: url,\n        [sortOption]: sortValue\n      },\n      this.fetchPosts\n    );\n  };\n\n  handlePageClick = selectedPage => {\n    const { selected } = selectedPage;\n    const page = selected + 1;\n    const { apiUrl } = this.state;\n\n    const paramsToUpdate = [\n      {\n        param: QUERY_PARAMS.PAGE,\n        value: page\n      }\n    ];\n    const updatedUrl = updateUrlParams(apiUrl)(paramsToUpdate);\n\n    this.setState(\n      {\n        apiUrl: updatedUrl\n      },\n      this.fetchPosts\n    );\n  };\n\n  showAuthorModal = authorId =>\n    this.setState({ isAuthorModalVisible: true, authorId });\n\n  hideAuthorModal = () =>\n    this.setState({ isAuthorModalVisible: false, authorId: null });\n\n  render() {\n    const {\n      authorId,\n      dateDropdownDefaultValue,\n      displayMode,\n      isAuthorModalVisible,\n      nameDropdownDefaultValue,\n      pagination,\n      posts\n    } = this.state;\n\n    if (!pagination) {\n      return null;\n    }\n\n    const { totalPages } = pagination;\n\n    return (\n      <>\n        <Container className=\"dashboard__container\" maxWidth=\"xl\">\n          <DashboardHeader\n            dateDropdownDefaultValue={dateDropdownDefaultValue}\n            displayMode={displayMode}\n            nameDropdownDefaultValue={nameDropdownDefaultValue}\n            onDateDropdownChange={this.handleSortingByDate}\n            onDisplayModeChange={this.handleDisplayModeChange}\n            onNameDropdownChange={this.handleSortingByName}\n          />\n          <div\n            className={classNames('dashboard__container-body', {\n              'dashboard__container-body--grid':\n                displayMode === DISPLAY_MODE.GRID,\n              'dashboard__container-body--list':\n                displayMode === DISPLAY_MODE.LIST\n            })}\n          >\n            {posts.map(post =>\n              displayMode === DISPLAY_MODE.GRID ? (\n                <GridItem data={post} key={`${post.id}`} />\n              ) : (\n                <ListItem\n                  data={post}\n                  key={`${post.id}`}\n                  onInfoClick={this.showAuthorModal}\n                />\n              )\n            )}\n          </div>\n          <footer className=\"dashboard__footer\">\n            <ReactPaginate\n              activeClassName=\"active\"\n              breakClassName=\"break-me\"\n              breakLabel=\"...\"\n              containerClassName=\"pagination\"\n              marginPagesDisplayed={1}\n              nextLabel=\">\"\n              onPageChange={this.handlePageClick}\n              pageCount={totalPages}\n              pageRangeDisplayed={2}\n              previousLabel=\"<\"\n              subContainerClassName=\"pages pagination\"\n            />\n          </footer>\n        </Container>\n        {isAuthorModalVisible && (\n          <>\n            <Overlay />\n            <AuthorModal onClose={this.hideAuthorModal} authorId={authorId} />\n          </>\n        )}\n      </>\n    );\n  }\n}\n\nexport default Dashboard;\n","import React, { PureComponent } from 'react';\nimport {\n  Button,\n  Checkbox,\n  FormControlLabel,\n  Paper,\n  TextareaAutosize,\n  TextField,\n  Typography\n} from '@material-ui/core';\nimport PropTypes from 'prop-types';\n\nclass CommentModal extends PureComponent {\n  constructor(props) {\n    super(props);\n\n    const { isCheckboxChecked } = this.props;\n\n    this.state = {\n      authorName: '',\n      comment: '',\n      isCheckboxChecked\n    };\n  }\n\n  componentDidUpdate(prevProps) {\n    const { isCheckboxChecked: prevIsChecked } = prevProps;\n    const { isCheckboxChecked } = this.props;\n\n    if (isCheckboxChecked !== prevIsChecked) {\n      this.handleCheckboxUpdate();\n    }\n  }\n\n  handleCheckboxUpdate = () => {\n    const { isCheckboxChecked } = this.props;\n\n    this.setState({ isCheckboxChecked });\n  };\n\n  handleNameChange = event => {\n    const { value } = event.target;\n\n    this.setState({ authorName: value });\n  };\n\n  handleCommentChange = event => {\n    const { value } = event.target;\n\n    this.setState({ comment: value });\n  };\n\n  handleSubmit = event => {\n    event.preventDefault();\n\n    const { onSubmit } = this.props;\n    const { authorName, comment, isCheckboxChecked } = this.state;\n    const data = {\n      authorName,\n      comment\n    };\n\n    if (isCheckboxChecked) {\n      return onSubmit(data);\n    }\n  };\n\n  render() {\n    const { isCheckboxChecked, onCheck, onClose } = this.props;\n\n    return (\n      <Paper className=\"comment-modal\">\n        <form onSubmit={this.handleSubmit}>\n          <header className=\"comment-modal__header\">\n            <Typography align=\"left\" gutterBottom>\n              Add comment\n            </Typography>\n          </header>\n          <div className=\"comment-modal__body\">\n            <TextField\n              className=\"comment-modal__input\"\n              id=\"filled-basic\"\n              label=\"Your name\"\n              onChange={this.handleNameChange}\n              required\n              variant=\"filled\"\n            />\n            <TextareaAutosize\n              className=\"comment-modal__textarea\"\n              onChange={this.handleCommentChange}\n              placeholder=\"Your comment\"\n              required\n              rows={3}\n            />\n            <FormControlLabel\n              className=\"comment-modal__consent\"\n              control={\n                <Checkbox\n                  checked={isCheckboxChecked}\n                  color=\"primary\"\n                  id=\"checkbox1\"\n                  onChange={onCheck}\n                  required\n                />\n              }\n              label=\"I accept Privacy Policy.\"\n            />\n          </div>\n          <footer className=\"comment-modal__footer\">\n            <Button color=\"primary\" type=\"submit\" variant=\"contained\">\n              Submit\n            </Button>\n            <Button color=\"default\" onClick={onClose} variant=\"contained\">\n              Close\n            </Button>\n          </footer>\n        </form>\n      </Paper>\n    );\n  }\n}\n\nCommentModal.propTypes = {\n  isCheckboxChecked: PropTypes.bool.isRequired,\n\n  onCheck: PropTypes.func.isRequired,\n  onClose: PropTypes.func.isRequired,\n  onSubmit: PropTypes.func.isRequired\n};\n\nexport default CommentModal;\n","import React, { PureComponent } from 'react';\nimport { Container, Typography, Button, Paper } from '@material-ui/core';\nimport { withRouter } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport ReactImage from 'react-image';\n\nimport CommentModal from '../../common/components/CommentModal';\nimport Overlay from '../../common/components/Overlay';\nimport AuthorModal from '../../common/components/AuthorInfoModal';\nimport { putData, getData } from '../../common/fetchMethods';\nimport { API_DATA } from '../../common/config';\nimport { readLocalStorage } from '../../common/helpers';\nimport { USER_DATA } from '../../common/enums';\nimport Preloader from '../../common/components/Prelodaer';\n\nclass SinglePost extends PureComponent {\n  constructor() {\n    super();\n\n    this.state = {\n      comments: [],\n      enterTime: null,\n      isAuthorModalVisible: false,\n      isCheckboxChecked: false,\n      isCommentModalVisible: false,\n      postData: null,\n      userToken: null\n    };\n  }\n\n  componentDidMount() {\n    this.fetchUserData();\n    this.handleEnterTime();\n  }\n\n  componentWillUnmount() {\n    this.handleLeaveTime();\n  }\n\n  fetchUserData = () => {\n    const { userToken } = readLocalStorage(USER_DATA.TOKEN);\n\n    this.setState({ userToken }, () => this.fetchPostData());\n  };\n\n  fetchPostData = async () => {\n    const {\n      history: {\n        location: { pathname }\n      }\n    } = this.props;\n    const { userToken } = this.state;\n\n    try {\n      const result = await getData(`${API_DATA.URL}${pathname}`)(userToken);\n      const { data } = result;\n\n      this.setState({ postData: data });\n    } catch (error) {\n      /**\n       * This is not a good practice to handle errors,\n       * console error is only used temporary\n       */\n    }\n  };\n\n  handleEnterTime = () => {\n    const enterTime = Date.now();\n\n    this.setState({ enterTime });\n  };\n\n  handleLeaveTime = async () => {\n    const { enterTime, userToken } = this.state;\n    const leaveTime = Date.now();\n    const time = leaveTime - enterTime;\n    const {\n      postData: { id }\n    } = this.state;\n\n    try {\n      await putData(`${API_DATA.URL}/${API_DATA.PUT_TIME}/${id}`, { time })(\n        userToken\n      );\n    } catch (error) {\n      /**\n       * This is not a good practice to handle errors,\n       * console error is only used temporary\n       */\n    }\n  };\n\n  handleCommentSubmit = data => {\n    const { comments } = this.state;\n    const { userName, comment } = data;\n\n    this.setState({ comments: [...comments, { userName, comment }] });\n    this.hideCommentModal();\n  };\n\n  showCommentModal = () => this.setState({ isCommentModalVisible: true });\n\n  hideCommentModal = () => this.setState({ isCommentModalVisible: false });\n\n  showAuthorModal = () => this.setState({ isAuthorModalVisible: true });\n\n  hideAuthorModal = () => this.setState({ isAuthorModalVisible: false });\n\n  checkCheckbox = () => this.setState({ isCheckboxChecked: true });\n\n  uncheckCheckbox = () => this.setState({ isCheckboxChecked: false });\n\n  render() {\n    const {\n      isAuthorModalVisible,\n      isCheckboxChecked,\n      isCommentModalVisible,\n      postData\n    } = this.state;\n\n    if (!postData) {\n      return null;\n    }\n\n    const { date, content, title, thumbnail, authorId } = postData;\n\n    return (\n      <>\n        <Container className=\"single-post\" maxWidth=\"md\">\n          <Paper className=\"single-post__paper\">\n            <header className=\"single-post__header\">\n              <Typography\n                className=\"single-post__heading\"\n                gutterBottom\n                variant=\"h6\"\n              >\n                {title}\n              </Typography>\n              <div className=\"single-post__img-wrapper\">\n                <ReactImage\n                  alt=\"post thumbnail\"\n                  className=\"single-post__image\"\n                  loader={<Preloader />}\n                  src={[thumbnail, 'https://via.placeholder.com/300x175']}\n                />\n              </div>\n            </header>\n            <div className=\"single-post__body\">\n              <div className=\"single-post__content-top\">\n                <Typography>{date}</Typography>\n                <Button\n                  color=\"default\"\n                  onClick={this.showAuthorModal}\n                  variant=\"contained\"\n                >\n                  i\n                </Button>\n              </div>\n              <Typography className=\"single-post__content-text\">\n                {content}\n              </Typography>\n              <footer className=\"single-post__footer\">\n                <Button\n                  color=\"primary\"\n                  onClick={\n                    isCommentModalVisible\n                      ? this.hideCommentModal\n                      : this.showCommentModal\n                  }\n                  variant=\"contained\"\n                >\n                  Comment\n                </Button>\n              </footer>\n            </div>\n          </Paper>\n        </Container>\n        {isCommentModalVisible && (\n          <>\n            <Overlay />\n            <CommentModal\n              isCheckboxChecked={isCheckboxChecked}\n              onCheck={\n                isCheckboxChecked ? this.uncheckCheckbox : this.checkCheckbox\n              }\n              onClose={this.hideCommentModal}\n              onSubmit={this.handleCommentSubmit}\n            />\n          </>\n        )}\n        {isAuthorModalVisible && (\n          <>\n            <Overlay />\n            <AuthorModal authorId={authorId} onClose={this.hideAuthorModal} />\n          </>\n        )}\n      </>\n    );\n  }\n}\n\nSinglePost.propTypes = {\n  history: PropTypes.shape({\n    location: PropTypes.objectOf(PropTypes.any)\n  }).isRequired\n};\n\nexport default withRouter(SinglePost);\n","import React from 'react';\nimport { AppBar, Typography, Button } from '@material-ui/core';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nconst AppTopBar = ({ onLogout }) => (\n  <AppBar color=\"primary\">\n    <Button color=\"default\" className=\"app-top-bar__button\" variant=\"contained\">\n      <Link to=\"/dashboard\">Home</Link>\n    </Button>\n    <Typography align=\"center\" className=\"app-top-bar__heading\" variant=\"h5\">\n      Simple Web App\n    </Typography>\n    <Button\n      className=\"app-top-bar__button\"\n      color=\"default\"\n      onClick={onLogout}\n      variant=\"contained\"\n    >\n      <Typography>Logout</Typography>\n    </Button>\n  </AppBar>\n);\n\nAppTopBar.propTypes = {\n  onLogout: PropTypes.func.isRequired\n};\n\nexport default AppTopBar;\n","import React, { PureComponent } from 'react';\nimport Typography from '@material-ui/core/Typography';\nimport { Redirect, Route, Switch, withRouter } from 'react-router-dom';\n\nimport '../styles/index.scss';\nimport LoginForm from '../modules/login/LoginForm';\nimport Dashboard from '../modules/dashboard/Dashboard';\nimport SinglePost from '../modules/singlePost/SinglePost';\nimport AppTopBar from '../common/components/AppBar';\nimport {\n  readLocalStorage,\n  removeLocalStorageItem,\n  saveToLocalStorage\n} from '../common/helpers';\nimport { USER_DATA } from '../common/enums';\n\nclass App extends PureComponent {\n  constructor() {\n    super();\n\n    this.state = {\n      userToken: ''\n    };\n  }\n\n  componentDidMount() {\n    this.fetchUserToken();\n  }\n\n  fetchUserToken = () => {\n    const userToken = readLocalStorage(USER_DATA.TOKEN);\n\n    if (userToken) {\n      this.setState({ userToken });\n    }\n  };\n\n  handleLogin = userToken => {\n    saveToLocalStorage(USER_DATA.TOKEN, { userToken });\n\n    this.setState({ userToken });\n  };\n\n  handleLogout = () => {\n    removeLocalStorageItem(USER_DATA.TOKEN);\n    window.location.reload();\n  };\n\n  render() {\n    const { userToken } = this.state;\n\n    return (\n      <div className=\"App\">\n        {!userToken ? (\n          <>\n            <Typography variant=\"h1\" gutterBottom>\n              Simple Web App\n            </Typography>\n            <Switch>\n              <Route\n                exact\n                path=\"/\"\n                render={() => <LoginForm onLogin={this.handleLogin} />}\n              />\n              <Redirect to=\"/\" />\n            </Switch>\n          </>\n        ) : (\n          <>\n            <AppTopBar onLogout={this.handleLogout} />\n            <Switch>\n              <Redirect from=\"/\" exact to=\"/dashboard\" />\n              <Route path=\"/dashboard\" component={Dashboard} />\n              <Route path=\"/posts/:id\" component={SinglePost} />\n            </Switch>\n          </>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default withRouter(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { createBrowserHistory } from 'history';\n\nexport default createBrowserHistory();\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './app/App.jsx';\nimport * as serviceWorker from './serviceWorker';\nimport 'typeface-roboto';\nimport { Router } from 'react-router-dom';\nimport history from './common/browserHistory';\n\nReactDOM.render(\n  <Router history={history}>\n    <App />\n  </Router>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}